version: 2.1

commands:

  ### COMMANDS TO SETUP ENVIRONMENTS ###

  setup-backend-environment:
    description: Add environment variables to backend .env
    steps:
      - run:
          name: Build backend .env
          command: |
            cd backend
            echo ENVIROMENT=$ENVIROMENT > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            echo ANSIBLE_HOST_KEY_CHECKING=False >> ".env"
  
  setup-frontend-environment:
    description: Add environment variables to backend .env
    steps:
      - run:
          name: Build frontend .env
          command: |
            cd frontend
            export BACKEND_IP=$(aws ec2 describe-instances \
                                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                                --output text)
            echo API_URL="http://${BACKEND_IP}:3030" >> ".env"

  ### COMMANDS TO INSTALL DEPENDENCIES ###

  install-aws-cli-dependencies:
    description: Install dependencies for aws-cli docker
    steps:
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install nodejs npm -y

  install-alpine-dependencies:
    description: Install dependencies we use on alpine docker
    steps:
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip python curl nodejs npm; \
            pip3 install --upgrade pip; \
            pip3 install --no-cache-dir awscli;

  install-node-dependencies:
    description: Install dependencies we use on node docker
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install python3 python3-pip curl
            pip3 install --upgrade pip
            pip3 install --no-cache-dir awscli

  ### COMMANDS TO BUILD, TEST, SCAN, AND DEPLOY ###

  build-module:
    description: Builds the frontend or backend packages
    parameters:
      module:
        type: string
    steps:
      - run:
          name: << parameters.module >> build
          command: |
            cd << parameters.module >>
            npm install
            npm run build

  test-module:
    description: Tests the frontend or backend packages
    parameters:
      module:
        type: string
    steps:
      - run:
          name: << parameters.module >> test
          command: |
            cd << parameters.module >>
            npm install
            npm run test

  scan-module:
    description: Scans the frontend or backend packages
    parameters:
      module:
        type: string
    steps:
      - run:
          name: << parameters.module >> scan
          command: |
            cd << parameters.module >>
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-module:
    description: Deploy either front-end or back-end infrastructure
    parameters:
      module:
        type: string
    steps:
      - run:
          name: Deploy << parameters.module >>
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/<< parameters.module >>.yml \
              --tags project=udapeople Name=<< parameters.module >>-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-<< parameters.module >>-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

  ### COMMANDS TO ROLLBACK ###

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}; \
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/M4vz8dTqMaBinouJP2Au3t/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
              exit 1
            fi

jobs:

  ### BUILD, TEST, AND SCAN ###

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - build-module:
          module: "frontend"
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - build-module:
          module: "backend"
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - test-module:
          module: "frontend"
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - test-module:
          module: "backend"
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - scan-module:
          module: "frontend"

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - scan-module:
          module: "backend"

  ### DEPLOY AND CONFIGURE INFRASTRUCTURE ###

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install-aws-cli-dependencies
      - deploy-module:
          module: "backend"
      - deploy-module:
          module: "frontend"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt; \
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - install-alpine-dependencies
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible; \
            export ANSIBLE_HOST_KEY_CHECKING=False; \
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  ### RUN MIGRATIONS AND DEPLOY MODULES ###

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - install-node-dependencies
      - setup-backend-environment
      - run:
          name: Set up environment and run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            echo "The results of migrations were:"
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            pwd
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/M4vz8dTqMaBinouJP2Au3t/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1' -k
            else 
              curl https://kvdb.io/M4vz8dTqMaBinouJP2Au3t/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0' -k
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install-aws-cli-dependencies
      - attach_workspace:
          at: ~/
      - setup-frontend-environment
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
                 
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - install-alpine-dependencies
      - setup-backend-environment
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-environment

  ### SMOKE TEST BEFORE UPDATING CLOUDFRONT AND CLEANUP ###

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - install-alpine-dependencies
      - setup-frontend-environment
      - run:
          name: Backend smoke test.
          command: |
            cd frontend
            export BACKEND_IP=$(aws ec2 describe-instances \
                                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install-aws-cli-dependencies
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - revert-migrations
      - destroy-environment
  
  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - install-aws-cli-dependencies
        - run:
            name: Get old stack workflow id and remove the old stacks and files
            command: |
              # Fetch the Old workflow ID
              export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              # Fetch the stack names          
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}"  
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                echo "---Delete Confirmed---"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              else
                echo "---Cannot Cleanup---"
              fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: ["main"]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]